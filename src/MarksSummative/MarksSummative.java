/*
 * Aliza Huynh
 * MarksSummative.Java
 * This program takes user inputted grades and adds them to an array
 * which can be sorted an analyzed to determine averages 
 * and other stats
 */
package MarksSummative;

/**
 *
 * @author AlizaHuynh
 */
import java.util.*;
public class MarksSummative extends javax.swing.JFrame
{

    /**
     * Creates new form MarksSummative
     */
    
    //ArrayList <String> grades = new ArrayList();
    //this initial declaration creates an arraylist of student grades
    ArrayList <Double> studentGrades = new ArrayList();
    
    public MarksSummative()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        markInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        gradeOutput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        finalOutput = new javax.swing.JTextArea();
        sortButton = new javax.swing.JButton();
        analyzeButton = new javax.swing.JButton();
        errorMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Marks Program");

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Student Grade:");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addButtonActionPerformed(evt);
            }
        });

        gradeOutput.setColumns(20);
        gradeOutput.setRows(5);
        jScrollPane1.setViewportView(gradeOutput);

        finalOutput.setColumns(20);
        finalOutput.setRows(5);
        jScrollPane2.setViewportView(finalOutput);

        sortButton.setText("Sort");

        analyzeButton.setText("Analyze");

        errorMessage.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        errorMessage.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorMessage)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(markInput, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(44, 44, 44)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(sortButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(analyzeButton)
                .addGap(119, 119, 119))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addButton)
                    .addComponent(markInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorMessage)
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sortButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(analyzeButton)))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int gradeLevelFail() {
        int count = 0;
        
        for (int i = 0; i < studentGrades.size(); i++)
        {
            //this loop will count the number of grades that are below 50
            //and will count it as a failing grade
            if (studentGrades.get(i) < 50)
            {
                count += 1;
            }
        }
        
        return count;
    }                 
    
    private int gradeLevel1() {
        int count = 0;
        
        for (int i = 0; i < studentGrades.size(); i++)
        {
            //this loop will count the number of grades in between 50 and 60
            //and assign it to a level 1 grade
            if ((studentGrades.get(i) >= 50) && (studentGrades.get(i) < 60)) 
            {
                count += 1;
            }
        }
        return count;
    }
    
    private int gradeLevel2() {
        int count = 0;
        for(int i = 0; i < studentGrades.size(); i++)
        {
            //this loop will count the number of grades in between 60 and 70
            //and assign it to a level 2 grade
            if ((studentGrades.get(i) >= 60) && (studentGrades.get(i) < 70)) {
                count += 1;
            }
        }
        return count;
    }
    
    private int gradeLevel3() {
        int count = 0;
        for(int i = 0; i < studentGrades.size(); i++)
        {
            //this loop will count the grades in between 70 and 80
            //and assign it to a level 3 grade
            if ((studentGrades.get(i) >= 70) && (studentGrades.get(i) < 80)) {
                count += 1;
            }
        }
        return count;
    }
    
    private int gradeLevel4() {
        int count = 0;
        for(int i = 0; i < studentGrades.size(); i++)
        {
            //this loop will count the grades above 80
            //and assign it to a level 4 grade
            if (studentGrades.get(i) >= 80) {
                count += 1;
            }
        }
        return count;
    }
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
    {//GEN-HEADEREND:event_addButtonActionPerformed
        //retrieve the mark from the input box
        double mark = Double.parseDouble(markInput.getText());
        
        //Collections.addAll(grades, markInput.getText());
        //grades.add(Integer.parseInt(markInput.getText()));

        //this loop ensures that only numbers between 0 and 100 are inputted into the array
        if ((mark>=0) && (mark<=100)) 
        {
            studentGrades.add(mark);
            gradeOutput.append(Double.toString(mark)+"\n");
            markInput.setText(null); 
            //this brings the focus back to the mark entry area
            markInput.requestFocus();
        }
        
        else {
            //this message will display if the entered value does not fit the above condition
            //the number will not be added to the list
            errorMessage.setText("Please enter a valid grade");
        }
        addButton.setEnabled(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void analyseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseButtonActionPerformed
        double failingGrade = gradeLevelFail();
        double grade1 = gradeLevel1();
        double grade2 = gradeLevel2();
        double grade3 = gradeLevel3();
        double grade4 = gradeLevel4();
         
        double average = studentAverage();
        double max = studentMaximum();
        double min = studentMinimum();
        double range = studentGradeRange(min, max);
        
        //this displays text in the final text area upon pressing analyze button
        //returns average/max/min/range
        finalOutput.setText("Class average: "+ Math.round(average * 10) / 10 + "\n" +"Student maximum: "+Math.round(max * 10) / 10+"\n" +"Student minimum: "+Math.round(min  * 10) / 10+"\n" +"Student grade range: "+Math.round(range * 10) /10+"\n" +"Grades at level 4: "+ grade4 + "\n" +"Grades at level 3: "+ grade3 + "\n" +"Grades at level 2: "+ grade2 + "\n" +"Grades at level 1: "+ grade1 + "\n" +"Grades at level R: "+ failingGrade + "\n");
    }//GEN-LAST:event_analyseButtonActionPerformed
    
    private double studentMinimum() {
        return (Collections.min(studentGrades));
    }
    
    private double studentMaximum() {
        return (Collections.max(studentGrades));
    }
    
    private double studentGradeRange(double min, double max) {
        return max-min;
    }
   private double studentAverage() {
        double sum = 0;
        
        //in order to get the average of the student grades
        //add all grades and divide by number of grades
        //this value may vary depending on how many numbers student inputs
        
        for(int i = 0; i < studentGrades.size(); i++)
        {
            sum += studentGrades.get(i);
        }
        return sum / studentGrades.size();
    }
   
    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        //in order to sort the grades into ascending order
        Collections.sort(studentGrades);
        for (int i = 0; i < studentGrades.size(); i++) 
        {
            studentGrades.toString();
            gradeOutput.setText(gradeOutput.getText()+ studentGrades.get(i) + "\n");
        }
        
//        Collections.sort(studentGrades);
//        Collections.reverse(studentGrades);
//        
//        gradeOutput.setText(" ");
//        for (int i = 0; i < studentGrades.size(); i++) 
//        {
                    //take value from input field and use it for
//                       gradeOutput.append(studentGrades.get(i)+"\n");
//        }
    }//GEN-LAST:event_sortButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MarksSummative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MarksSummative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MarksSummative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MarksSummative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MarksSummative().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton analyzeButton;
    private javax.swing.JLabel errorMessage;
    private javax.swing.JTextArea finalOutput;
    private javax.swing.JTextArea gradeOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField markInput;
    private javax.swing.JButton sortButton;
    // End of variables declaration//GEN-END:variables
}
